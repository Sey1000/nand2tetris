// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // ====================
    //      A Register
    // ====================
    // A register can be loaded by A instruction or C instruction
    // load because it is A instruction
    Not(in=instruction[15], out=isAInstruction);
    // load because it is C instruction with A as destination
    And(a=instruction[15], b=instruction[5], out=aRegCInstructionLoad);
    Or(a=isAInstruction, b=aRegCInstructionLoad, out=aRegisterLoad);
    // In value depends on which control bit is on
    Mux16(a=aluOut, b[0..14]=instruction[0..14], sel=isAInstruction, out=aRegisterInValue);
    ARegister(in=aRegisterInValue, load=aRegisterLoad, out=aRegisterOut, out[0..14]=addressM);
    // ====================
    //      D Register
    // ====================
    // D register can be loaded by C instruction with D as destination
    And(a=instruction[15], b=instruction[4], out=dRegisterLoad);
    DRegister(in=aluOut, load=dRegisterLoad, out=dRegisterOut);


    // ====================
    //          ALU
    // ====================
    // Depending on instruction[3] y of ALU switches between A and M
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aOrM);
    ALU(x=dRegisterOut, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=aluZr, ng=aluNg);

    // ====================
    //      M Stuff
    // ====================
    // outM is same as ALU output. addressM is same as aRegisterOut. Only needs writeM control bit
    // writeM is asserted by C instruction with M as destination
    And(a=instruction[15], b=instruction[3], out=writeM);

    // ====================
    //      PC Stuff
    // ====================
    // PC chip comes with handling reset

    // jump condition calculation
    Not(in=aluNg, out=notAluNg);
    Not(in=aluZr, out=notAluZr);
    Not(in=instruction[2], out=instuctionBitTwoFlipped);
    Not(in=instruction[1], out=instuctionBitOneFlipped);
    Not(in=instruction[0], out=instuctionBitZeroFlipped);

    // JGT
    And(a=instuctionBitTwoFlipped, b=instuctionBitOneFlipped, out=JGTPartOne);
    And(a=JGTPartOne, b=instruction[0], out=JGTCompare);
    And(a=JGTCompare, b=notAluNg, out=JGTPartTwo);
    And(a=JGTPartTwo, b=notAluZr, out=JGT);

    // JEQ
    And(a=instuctionBitTwoFlipped, b=instruction[1], out=JEQPartOne);
    And(a=JEQPartOne, b=instuctionBitZeroFlipped, out=JEQCompare);
    And(a=JEQCompare, b=aluZr, out=JEQ);

    // JGE
    And(a=instuctionBitTwoFlipped, b=instruction[1], out=JGEPartOne);
    And(a=JGEPartOne, b=instruction[0], out=JGECompare);
    And(a=JGECompare, b=notAluNg, out=JGE);

    // JLT
    And(a=instruction[2], b=instuctionBitOneFlipped, out=JLTPartOne);
    And(a=JLTPartOne, b=instuctionBitZeroFlipped, out=JLTCompare);
    And(a=JLTCompare, b=aluNg, out=JLT);

    // JNE
    And(a=instruction[2], b=instuctionBitOneFlipped, out=JNEPartOne);
    And(a=JNEPartOne, b=instruction[0], out=JNECompare);
    And(a=JNECompare, b=notAluZr, out=JNE);

    // JLE
    And(a=instruction[2], b=instruction[1], out=JLEPartOne);
    And(a=JLEPartOne, b=instuctionBitZeroFlipped, out=JLECompare);
    Or(a=aluNg, b=aluZr, out=lessOrEqual);
    And(a=JLECompare, b=lessOrEqual, out=JLE);

    // JMP
    And(a=instruction[2], b=instruction[1], out=unconditionalJumpPartOne);
    And(a=unconditionalJumpPartOne, b=instruction[0], out=unconditionalJump);

    // Jump Bits Calculated
    Or8Way(in[1]=JGT, in[2]=JEQ, in[3]=JGE, in[4]=JLT, in[5]=JNE, in[6]=JLE, in[7]=unconditionalJump, out=jumpIfCInstruction);

    // jumping case: only for C Instruction
    And(a=instruction[15], b=jumpIfCInstruction, out=jump);

    // incrementing case
    Not(in=jump, out=incrementPc);
    PC(in=aRegisterOut, load=jump, inc=incrementPc, reset=reset, out[0..14]=pc);
}
