// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux8Way(in=load, sel=address[3..5], a=loadZero, b=loadOne, c=loadTwo, d=loadThree, e=loadFour, f=loadFive, g=loadSix, h=loadSeven);

    RAM8(in=in, load=loadZero, address=address[0..2], out=ramZeroOut);
    RAM8(in=in, load=loadOne, address=address[0..2], out=ramOneOut);
    RAM8(in=in, load=loadTwo, address=address[0..2], out=ramTwoOut);
    RAM8(in=in, load=loadThree, address=address[0..2], out=ramThreeOut);
    RAM8(in=in, load=loadFour, address=address[0..2], out=ramFourOut);
    RAM8(in=in, load=loadFive, address=address[0..2], out=ramFiveOut);
    RAM8(in=in, load=loadSix, address=address[0..2], out=ramSixOut);
    RAM8(in=in, load=loadSeven, address=address[0..2], out=ramSevenOut);

    Mux8Way16(a=ramZeroOut, b=ramOneOut, c=ramTwoOut, d=ramThreeOut, e=ramFourOut, f=ramFiveOut, g=ramSixOut, h=ramSevenOut, sel=address[3..5], out=out);
}
